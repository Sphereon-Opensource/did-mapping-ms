<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sphereon.ms.did.mapping</groupId>
    <artifactId>did-mapping-ms</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>Sphereon DID Mapping</name>
    <description>A microservice for storing associations between user IDs and DIDs for applications that want to use DID-Auth</description>

    <properties>
        <java.version>11</java.version>
        <asciidoc.input.directory>${project.basedir}/src/docs/asciidoc</asciidoc.input.directory>
        <swagger.output.dir>${project.basedir}/src/main/resources/swagger</swagger.output.dir>
        <asciidoc.snippet.directory>${project.build.directory}/asciidoc/snippets</asciidoc.snippet.directory>
        <asciidoc.generated.directory>${project.build.directory}/asciidoc/generated</asciidoc.generated.directory>
        <swagger.input>${swagger.output.dir}/swagger.sdk.json</swagger.input>


        <!-- Docker settings -->
        <docker.registry.push>hostname</docker.registry.push> <!-- Create <server> section in .m2/chainSettings.xml with this registry
                                                                    as id to authenticate to the private registry -->
        <docker.registry.push.secret-name>registry-secret</docker.registry.push.secret-name>
        <docker.registry.pull>docker.io</docker.registry.pull> <!-- Create <server> section in .m2/chainSettings.xml with this registry as id to authenticate to the
                                                                      private registry, or do a docker login -u <user> manually -->
        <config.mongodb.hostname>mongo</config.mongodb.hostname>
        <config.mongodb.port>27017</config.mongodb.port>
        <config.mongodb.database>did_mapping</config.mongodb.database>

        <fabric8.generator.from>fabric8/java-alpine-openjdk11-jre</fabric8.generator.from>
        <docker.repository>${fabric8.label.provider}/${project.artifactId}</docker.repository>
        <docker.version-tag>latest</docker.version-tag>

        <!-- HTTP mode -->
        <container.enable-tomcat-ajp>false</container.enable-tomcat-ajp>
        <tcp.port.internal>8080</tcp.port.internal>
        <tcp.port.exposed>8801</tcp.port.exposed>

        <!-- Fabric8 Kubernetes Metadata -->
        <fabric8.namespace>dev</fabric8.namespace>
        <fabric8.service.name>${project.artifactId}</fabric8.service.name>
        <fabric8.domain>local</fabric8.domain>
        <fabric8.label.provider>sphereon</fabric8.label.provider>
        <fabric8.label.group>com.sphereon.did</fabric8.label.group>
        <fabric8.label.container>java</fabric8.label.container>
        <fabric8.service.type>ClusterIP</fabric8.service.type>
        <fabric8.ingress-class>nginx</fabric8.ingress-class> <!-- or i.e. traefik, gce -->

        <!-- artifact versions -->
        <swagger2markup.version>1.3.1</swagger2markup.version>
        <springfox.version>2.9.2</springfox.version>
        <fabric8.plugin.version>4.4.1</fabric8.plugin.version>
    </properties>

    <licenses>
        <license>
            <name>Apache2</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Sphereon Devops Team</name>
            <email>dev@sphereon.com</email>
            <organization>Sphereon B.V.</organization>
            <organizationUrl>https://sphereon.com</organizationUrl>
        </developer>
    </developers>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.9.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
            <version>2.2.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- Swagger (springfox) dependencies -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-core</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-bean-validators</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.13</version>
        </dependency>

        <!-- Rest assured dependencies for testing -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.2.0</version>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>spring-web-test-client</artifactId>
            <version>3.2.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.6</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>fabric8-maven-plugin</artifactId>
                    <version>${fabric8.plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>write-swagger-json</id>
            <build>
                <defaultGoal>clean compile test</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0-M4</version>
                        <inherited>false</inherited>
                        <configuration>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <includes combine.self="override">
                                <include>WriteSwaggerJson.java</include>
                            </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>f8-build</id>
            <build>
                <defaultGoal>clean package fabric8:build</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>fabric8-maven-plugin</artifactId>
                        <configuration>
                            <pullRegistry>${docker.registry.pull}</pullRegistry>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${docker.repository}:${docker.version-tag}</name>
                                    <build>
                                        <from>${fabric8.generator.from}</from>
                                        <assembly>
                                            <basedir>/deployments</basedir>
                                            <descriptorRef>artifact</descriptorRef>
                                        </assembly>
                                        <ports>
                                            <port>${tcp.port.internal}</port>
                                        </ports>
                                    </build>
                                </image>
                            </images>
                            <helm>
                                <chart>${project.artifactId}</chart>
                                <keywords>did,digital-identity,sphereon</keywords>
                            </helm>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>f8-push</id>
            <build>
                <defaultGoal>fabric8:push</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>fabric8-maven-plugin</artifactId>
                        <configuration>
                            <pushRegistry>${docker.registry.push}</pushRegistry>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${docker.repository}:${docker.version-tag}</name>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>f8-apply</id>
            <build>
                <defaultGoal>fabric8:apply</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>fabric8-maven-plugin</artifactId>
                        <configuration>
                            <pushRegistry>${docker.registry.push}</pushRegistry>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${docker.repository}:${docker.version-tag}</name>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-start</id>
            <build>
                <defaultGoal>docker:start</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.33.0</version>
                        <configuration>
                            <images>
                                <image>
                                    <name>${docker.repository}:${docker.version-tag}</name>
                                    <alias>${fabric8.namespace}_${project.artifactId}</alias>
                                    <run>
                                        <namingStrategy>alias</namingStrategy>
                                        <dependsOn>
                                            <container>mongo</container>
                                        </dependsOn>
                                        <links>
                                            <link>mongo</link>
                                        </links>
                                        <ports>
                                            <port>${tcp.port.exposed}:${tcp.port.internal}</port>
                                        </ports>
                                        <env>
                                            <JAVA_OPTIONS>-Dspring.data.mongodb.host=mongo
                                                -Dtomcat.protocol.ajp=${container.enable-tomcat-ajp}
                                            </JAVA_OPTIONS>
                                        </env>
                                    </run>
                                </image>
                            </images>
                        </configuration>

                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <defaultGoal>clean compile test package</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.4.0</version>
                        <executions>
                            <execution>
                                <id>WriteSwaggerJson</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>mvn</executable>
                            <environmentVariables>
                                <JAVA_HOME>${java.home}</JAVA_HOME>
                            </environmentVariables>
                            <arguments>
                                <argument>-Pwrite-swagger-json</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0-M4</version>
                        <inherited>false</inherited>
                        <configuration>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <systemPropertyVariables>
                                <io.springfox.staticdocs.outputDir>${swagger.output.dir}
                                </io.springfox.staticdocs.outputDir>
                                <io.springfox.staticdocs.snippetsOutputDir>${asciidoc.snippet.directory}
                                </io.springfox.staticdocs.snippetsOutputDir>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- First, use the swagger2markup plugin to generate asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.version}</version>
                        <dependencies>
                            <dependency>
                                <groupId>io.github.swagger2markup</groupId>
                                <artifactId>swagger2markup-import-files-ext</artifactId>
                                <version>${swagger2markup.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>io.github.swagger2markup</groupId>
                                <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
                                <version>${swagger2markup.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${asciidoc.generated.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
                                <swagger2markup.extensions.dynamicOverview.contentPath>
                                    ${asciidoc.input.directory}/extensions/overview
                                </swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>
                                    ${asciidoc.input.directory}/extensions/definitions
                                </swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>
                                    ${asciidoc.input.directory}/extensions/paths
                                </swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>
                                    ${asciidoc.input.directory}/extensions/security/
                                </swagger2markup.extensions.dynamicSecurity.contentPath>

                                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${asciidoc.snippet.directory}
                                </swagger2markup.extensions.springRestDocs.snippetBaseUri>
                                <swagger2markup.extensions.springRestDocs.defaultSnippets>true
                                </swagger2markup.extensions.springRestDocs.defaultSnippets>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
